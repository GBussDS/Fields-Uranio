import streamlit as st

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Quiz sobre Ur√¢nio", page_icon="ü§î")

# Definindo a anima√ß√£o CSS para o efeito de slide da direita para a esquerda
st.markdown("""
    <style>
    /* Aplica o slide-in da direita para a esquerda apenas no conte√∫do principal */
    div[data-testid="stMainBlockContainer"] > div {
        animation: slideInRight 0.5s ease-in-out;
    }

    @keyframes slideInRight {
        0% { transform: translateX(100%); opacity: 0; }
        100% { transform: translateX(0); opacity: 1; }
    }

    /* Customiza√ß√£o das bordas */
    .correct {
        border: 3px solid green !important;
        background-color: #e0ffe0;
    }

    .incorrect {
        border: 3px solid red !important;
        background-color: #ffe0e0;
    }

    /* Estilo para os bot√µes */
    .stButton {
        width: 100% !important; /* Todos os bot√µes ter√£o a mesma largura */
        padding: 20px 0; /* Ajuste do padding para aumentar o tamanho vertical */
        font-size: 18px !important; /* Aumentando o tamanho da fonte */
        text-align: center !important; /* Centralizando o texto */
        display: block; /* Garantindo que o bot√£o ocupe a largura completa */
        border-radius: 8px; /* Bordas arredondadas para os bot√µes */
        margin-bottom: 10px; /* Espa√ßamento entre os bot√µes */
    }
    </style>
""", unsafe_allow_html=True)

# Fun√ß√£o para criar a pergunta
def createQuestion(question, options, rightOne, question_index):
    # Inicializando o estado da pergunta
    if f'answered_{question_index}' not in st.session_state:
        st.session_state[f'answered_{question_index}'] = False  # Se j√° respondeu
        st.session_state[f'selected_option_{question_index}'] = None  # Resposta selecionada
        st.session_state[f'correct_answers_{question_index}'] = 0  # Contador de acertos

    # Fun√ß√£o para gerenciar a intera√ß√£o com as alternativas
    def highlight_answer(option, idx):
        if st.session_state[f'answered_{question_index}']:
            if option == options[rightOne]:
                return 'correct'
            else:
                return 'incorrect'
        return ''  # Caso ainda n√£o tenha sido respondido, n√£o aplica estilo

    st.write(f"### {question}")
    
    # Dividir as alternativas em duas colunas
    col1, col2 = st.columns(2)

    # Vari√°vel para controlar se a pergunta j√° foi respondida
    question_answered = st.session_state[f'answered_{question_index}']
    
    with col1:
        for i in range(2):
            option = options[i]
            if question_answered:  # Se a pergunta foi respondida
                button_class = highlight_answer(option, i)
                st.markdown(f'<button class="stButton {button_class}" disabled>{option}</button>', unsafe_allow_html=True)
            else:
                selected = st.button(option, key=f"{question_index}-{i}-{option}")
                if selected and not question_answered:
                    st.session_state[f'selected_option_{question_index}'] = option
                    st.session_state[f'answered_{question_index}'] = True
                    # Se a op√ß√£o for correta, incrementar o contador de acertos
                    if i == rightOne:
                        st.session_state[f'correct_answers_{question_index}'] += 1

    with col2:
        for i in range(2, 4):
            option = options[i]
            if question_answered:  # Se a pergunta foi respondida
                button_class = highlight_answer(option, i)
                st.markdown(f'<button class="stButton {button_class}" disabled>{option}</button>', unsafe_allow_html=True)
            else:
                selected = st.button(option, key=f"{question_index}-{i}-{option}")
                if selected and not question_answered:
                    st.session_state[f'selected_option_{question_index}'] = option
                    st.session_state[f'answered_{question_index}'] = True
                    # Se a op√ß√£o for correta, incrementar o contador de acertos
                    if i == rightOne:
                        st.session_state[f'correct_answers_{question_index}'] += 1

    # Mostrar a resposta correta ou incorreta imediatamente ap√≥s a sele√ß√£o
    if question_answered:
        st.write(f"**Voc√™ escolheu:** {st.session_state[f'selected_option_{question_index}']}")
        if st.session_state[f'selected_option_{question_index}'] == options[rightOne]:
            st.success("Resposta correta!")
        else:
            st.error(f"Resposta incorreta. A resposta correta √©: {options[rightOne]}")



# Lista de perguntas e respostas
questions = [
    ("Qual pa√≠s que mais produziu ur√¢nio nos √∫ltimos 10 anos?", ["Cazaquist√£o", "Brasil", "Austr√°lia", "China"], 0),
    ("Quanto de estoque acumulado de ur√¢nio (aproximadamente) temos dispon√≠vel no momento?", ["1 milh√£o Ton.", "200 mil Ton.", "5 milh√µes Ton.", "500 mil Ton."], 3),
    ("Qual o pa√≠s que mais possui reatores nucleares?", ["Estados Unidos", "R√∫ssia", "Canad√°", "Jap√£o"], 0),
    ("Qual destes pa√≠ses n√£o possui usinas nucleares?", ["Argentina", "Austr√°lia", "Cazaquist√£o", "M√©xico"], 1),
    ("O ur√¢nio atingiu seu pico de pre√ßo em 2007, quando chegou a custar aproximadamente ___ d√≥lares por libra. Complete a frase.", ["100", "240", "70", "140"], 3),
    ("Qual dos pa√≠ses abaixo est√° crescendo o n√∫mero de reatores rapidamente e teve mais que dobrada sua demanda por ur√¢nio nos √∫ltimos 10 anos?", ["Jap√£o", "China", "Alemanha", "Brasil"], 1),
    ("Qual dos pa√≠ses dentre os quatro abaixo possui maior demanda de ur√¢nio atualmente?", ["Canad√°", "Jap√£o", "Cor√©ia do Sul", "Inglaterra"], 2)
]

st.markdown("""
    <h2 style="text-align:center; color: #2e8b57;">üéâ Bem-vindo ao Quiz sobre Ur√¢nio! ü§î</h2>
    <p style="font-size:18px; text-align:center;">
        Voc√™ sabia que o ur√¢nio n√£o √© apenas uma mat√©ria-prima para energia nuclear, mas tamb√©m tem um impacto global? üåç
        √â a energia do futuro chegando, cada vez mais pr√≥xima de eu e voc√™! Veja se voc√™ aprendeu alguma coisa com
        nosso dashboard üöÄ
    </p>
    <p style="font-size:18px; text-align:center;">
        Voc√™ vai encontrar algumas perguntas divertidas e desafiadoras sobre o ur√¢nio e o mundo da energia nuclear, 
        7 quest√µes com respostas presentes em alguma das p√°ginas desse dashboard. Aproveite para ler todas as p√°ginas
        antes de responder o quiz! üå±üåê
    </p>
    <p style="font-size:18px; text-align:center; color: #ff4500;">
        Dica importante: para responder corretamente, voc√™ precisa clicar DUAS vezes: 
        1Ô∏è‚É£ Clique em uma op√ß√£o para selecionar a resposta;
        2Ô∏è‚É£ Em seguida, clique novamente para confirm√°-la!
    </p>
""", unsafe_allow_html=True)

# Exibindo as perguntas
for idx, (question, options, rightOne) in enumerate(questions):
    createQuestion(question, options, rightOne, idx)

# Mostrar o resultado final
total_questions = len(questions)
correct_answers = sum([st.session_state.get(f'correct_answers_{i}', 0) for i in range(total_questions)])

# Verificar se todas as perguntas foram respondidas
if all(st.session_state.get(f'answered_{i}', False) for i in range(total_questions)):  # Verifica se todas as perguntas foram respondidas
    st.write(f"### Voc√™ acertou {correct_answers} de {total_questions} perguntas!")

    # Exibir uma mensagem baseada na quantidade de acertos
    if correct_answers == total_questions:
        st.success("Parab√©ns! Voc√™ acertou todas as perguntas! üéâ Muito obrigado por ler nosso dashboard com carinho!")
    elif correct_answers >= total_questions // 2:
        st.success("√ìtimo! Voc√™ acertou a maioria das quest√µes. Obrigado por ler nosso dashboard!")
    else:
        st.warning("Opa, voc√™ errou algumas! Sem problemas, continue aprendendo e olhe mais p√°ginas! üí™")
