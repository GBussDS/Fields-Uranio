import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise de Constru√ß√£o e Demanda de Reatores", page_icon="‚è≥")

# Carregar dados
construction_data = pd.read_csv("../csvs/Tempo_Constru√ß√£o_Pa√≠s.csv")
reactor_completion_data = pd.read_csv("../csvs/Reatores_Finaliza√ß√£o.csv")
historical_demand_data = pd.read_csv("../csvs/Demanda_Completa.csv")

# Transformar demanda hist√≥rica para formato longo
historical_demand_long = historical_demand_data.melt(
    id_vars="Country", var_name="Year", value_name="Demand"
)
historical_demand_long["Year"] = historical_demand_long["Year"].astype(int)

# Gr√°fico 1: Tempo m√©dio de constru√ß√£o por pa√≠s
st.write("## Tempo M√©dio de Constru√ß√£o de Reatores por Pa√≠s")
avg_construction_time = construction_data.groupby("Country")["Construction Duration"].mean().reset_index().sort_values(by="Construction Duration")

fig_construction = px.bar(
    avg_construction_time,
    x="Construction Duration",
    y="Country",
    orientation="h",
    labels={"Construction Duration": "Tempo M√©dio de Constru√ß√£o (anos)", "Country": "Pa√≠s"},
    title="Tempo M√©dio de Constru√ß√£o de Reatores por Pa√≠s",
    height=800,  # Aumentar a altura do gr√°fico
)
fig_construction.update_layout(yaxis={"categoryorder": "total ascending"})
st.plotly_chart(fig_construction, use_container_width=True)

# Bot√£o para download dos dados de constru√ß√£o
st.download_button(
    label="üì• Baixar Dados de Tempo de Constru√ß√£o",
    data=construction_data.to_csv(index=False).encode("utf-8"),
    file_name="tempo_construcao.csv",
    mime="text/csv",
)

# Tabela: Datas de Finaliza√ß√£o dos Reatores
st.write("## Datas de Finaliza√ß√£o dos Reatores")
reactor_completion_data["Construction Start Date"] = pd.to_datetime(reactor_completion_data["Construction Start Date"])
reactor_completion_data["Predicted Completion Date"] = pd.to_datetime(reactor_completion_data["Predicted Completion Date"])
completion_table = reactor_completion_data.sort_values(by=["Country", "Predicted Completion Date"])
st.dataframe(completion_table[["Name", "Country", "Construction Start Date", "Predicted Completion Date"]])

# Bot√£o para download da tabela de finaliza√ß√£o dos reatores
st.download_button(
    label="üì• Baixar Tabela de Datas de Finaliza√ß√£o",
    data=completion_table.to_csv(index=False).encode("utf-8"),
    file_name="datas_finalizacao_reatores.csv",
    mime="text/csv",
)

# Gr√°fico 3: Demanda Hist√≥rica de Ur√¢nio com Previs√£o (1964-2050)
st.write("## Demanda Hist√≥rica e Previs√£o de Demanda de Ur√¢nio por Pa√≠s")
selected_countries = st.multiselect(
    "Selecione os pa√≠ses para visualizar",
    sorted(historical_demand_long["Country"].unique()),
    default=["FRANCE", "CHINA"],
)

filtered_demand_data = historical_demand_long[historical_demand_long["Country"].isin(selected_countries)]

fig_demand = px.line(
    filtered_demand_data,
    x="Year",
    y="Demand",
    color="Country",
    labels={"Year": "Ano", "Demand": "Demanda de Ur√¢nio (tU)", "Country": "Pa√≠s"},
    title="Demanda Hist√≥rica e Proje√ß√µes de Ur√¢nio por Pa√≠s",
)
fig_demand.update_layout(xaxis=dict(tickangle=90))
st.plotly_chart(fig_demand, use_container_width=True)

# Bot√£o para download da tabela de demanda hist√≥rica
st.download_button(
    label="üì• Baixar Dados de Demanda Hist√≥rica",
    data=historical_demand_data.to_csv(index=False).encode("utf-8"),
    file_name="demanda_historica.csv",
    mime="text/csv",
)

